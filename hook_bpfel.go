// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || amd64p32 || arm || arm64 || loong64 || mips64le || mips64p32le || mipsle || ppc64le || riscv64

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type hookFunctionParameterListT struct {
	FnAddr       uint64
	N_parameters uint32
	_            [4]byte
	Params       [6]struct {
		Kind     uint32
		Size     uint32
		Offset   int32
		InReg    bool
		_        [3]byte
		N_pieces int32
		RegNums  [6]int32
		_        [4]byte
		Daddr    uint64
		Val      [48]int8
		DerefVal [48]int8
	}
}

// loadHook returns the embedded CollectionSpec for hook.
func loadHook() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_HookBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load hook: %w", err)
	}

	return spec, err
}

// loadHookObjects loads hook and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*hookObjects
//	*hookPrograms
//	*hookMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadHookObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadHook()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// hookSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type hookSpecs struct {
	hookProgramSpecs
	hookMapSpecs
}

// hookSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type hookProgramSpecs struct {
	UprobeHook *ebpf.ProgramSpec `ebpf:"uprobe_hook"`
}

// hookMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type hookMapSpecs struct {
	ArgMap *ebpf.MapSpec `ebpf:"arg_map"`
}

// hookObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadHookObjects or ebpf.CollectionSpec.LoadAndAssign.
type hookObjects struct {
	hookPrograms
	hookMaps
}

func (o *hookObjects) Close() error {
	return _HookClose(
		&o.hookPrograms,
		&o.hookMaps,
	)
}

// hookMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadHookObjects or ebpf.CollectionSpec.LoadAndAssign.
type hookMaps struct {
	ArgMap *ebpf.Map `ebpf:"arg_map"`
}

func (m *hookMaps) Close() error {
	return _HookClose(
		m.ArgMap,
	)
}

// hookPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadHookObjects or ebpf.CollectionSpec.LoadAndAssign.
type hookPrograms struct {
	UprobeHook *ebpf.Program `ebpf:"uprobe_hook"`
}

func (p *hookPrograms) Close() error {
	return _HookClose(
		p.UprobeHook,
	)
}

func _HookClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed hook_bpfel.o
var _HookBytes []byte
